services:
  mysql:
    container_name: mysql-container
    image: mysql:9.0.1
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_ROOT_HOST: "%" # Allow root access from any host
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - apis-network
    restart: always
    # Healthcheck for mysql container
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "--silent"]
      interval: 5s
      timeout: 3s
      retries: 2
      start_period: 0s
  identity.api:
    image: identity-api
    build:
      context: .
      dockerfile: Services/Identity.API/Dockerfile
    networks:
      - apis-network
    depends_on:
      mysql:
        condition: service_healthy
  room.api:
    image: room-api
    build:
      context: .
      dockerfile: Services/Room.API/Dockerfile
    networks:
      - apis-network
    depends_on:
      mysql:
        condition: service_healthy
  tour.api:
    image: tour-api
    build:
      context: .
      dockerfile: Services/Tour.API/Dockerfile
    networks:
      - apis-network
    depends_on:
      mysql:
        condition: service_healthy
  booking.api:
    image: booking-api
    build: 
      context: .
      dockerfile: Services/Booking.API/Dockerfile
    networks:
      - apis-network
    depends_on:
      mysql:
        condition: service_healthy
  rabbitmq:
    container_name: rabbitmq-container
    image: rabbitmq:3-management-alpine
    networks:
      - apis-network
    ports:
      - 5672:5672
      - 15672:15672
  upload.api:
    image: upload-api
    build:
        context: .
        dockerfile: Services/Upload.API/Dockerfile
    networks:
      - apis-network  
  api_gateway:
    image: api-gateway
    build:
      context: .
      dockerfile: ApiGateways/OcelotApiGw/Dockerfile
    depends_on:
      - identity.api
      - room.api
      - tour.api
      - booking.api
      - saga.api
    networks:
      - apis-network
  saga.api:
    image: saga-api
    build:
      context: .
      dockerfile: Saga.Orchestrator/Saga.Orchestrator/Dockerfile
    networks:
      - apis-network
networks:
  apis-network:
    
volumes:
  mysql_data:
    name: mysql_data
